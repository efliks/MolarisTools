#!/usr/bin/env python

import sys, os.path
sys.path.append (os.path.join (os.environ["HOME"], "devel", "MolarisTools"))

from MolarisTools import MolarisInputFile, DistanceFile


def ReadVMD (filename):
    distances = []
    lines     = open (os.path.join ("..", "convert_movies", filename)).readlines ()
    for line in lines:
        tokens = line.split ()
        distances.append (float (tokens[1]))
    return distances


def GetPair (pair, vmdfile=None, nwindows=21):
    # . Collect equilibrium distances
    equil    = []
    for wcount in range (1, nwindows + 1):
        inputfile = MolarisInputFile (os.path.join ("..", "w%d" % wcount, "window_%d.inp" % wcount), pair=pair)
        forceConst, equilDist = inputfile.equil
        equil.append (equilDist)

    # . Collect distances from simulations
    simul    = []
    if vmdfile is None:
        # . Collect from Molaris dist.dat file
        for wcount in range (1, nwindows + 1):
            distfile = DistanceFile (os.path.join ("..", "w%d" % wcount, "window_%d" % wcount, "dist.dat"))
            if wcount < 2:
                # . Print some info
                print ("npairs = %d     nsteps = %d" % (distfile.npairs, distfile.nsteps))
            data = distfile.pairs[pair]
            simul.append (data)
    else:
        # . Collect from a file generated by VMD
        index     = 0
        distances = ReadVMD (vmdfile)
        entriesPerWindow = len (distances) / nwindows
        for wcount in range (1, nwindows + 1):
            simul.append (distances[index:index + entriesPerWindow])
            index += entriesPerWindow

    # . Calculate average distances from simulations
    aver     = []
    for series in simul:
        average = sum (series) / len (series)
        aver.append (average)
    return (equil, simul, aver)


def PutPair (equil, simul, aver, nwindows=21):
    # . Write meta file
    metafile = open ("wham.meta", "w")
    for wcount in range (1, nwindows + 1):
        # . Use the actual equilibrium distance, not the simulation average.
        metafile.write ("wham%02d.ts    %8.3f    200.000\n" % (wcount, equil[wcount - 1]))
    metafile.close ()

    # . Write timeseries files
    for wcount in range (1, nwindows + 1):
        timeseries = open ("wham%02d.ts" % wcount, "w")
        series = simul[wcount - 1]
        for si, s in enumerate (series, 1):
            timeseries.write ("%4d    %8.3f\n" % (si, s))
        timeseries.close ()


#===============================================================================
# . Main program
#===============================================================================
pair = (2, 6)
equil, simul, aver = GetPair (pair, vmdfile="dist_attacking.dat")

pairOther = (2, 1)
equilOther, simulOther, averOther = GetPair (pairOther, vmdfile="dist_leaving.dat")

# . Use first pair (=attacking distance)
PutPair (equil, simul, aver)

# . Use second pair (=leaving distance)
# PutPair (equilOther, simulOther, averOther)

# . Compare declared (=equilibrium) distances to actual average distances from simulations
output = open ("compare.dat", "w")
for eq, av, eqOther, avOther in zip (equil, aver, equilOther, averOther):
    output.write ("%8.3f    %8.3f    %8.3f    %8.3f\n" % (eq, av, eqOther, avOther))
output.close ()
